{"version":3,"sources":["components/Cell.js","components/Game.js","serviceWorker.js","index.js"],"names":["Cell","props","index","value","react_default","a","createElement","className","data-index","winnerCombinations","Game","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","cells","Array","fill","winner","currentTurn","event","cell","target","closest","dataset","_markCeil","_this$state","toArray","slice","marker","_checkWinner","setState","_i","length","combination","_ref","toConsumableArray","b","c","_this2","_this$state2","onClick","_getIndexCell","concat","components_Cell","_getCellText","Component","Boolean","window","location","hostname","match","ReactDOM","render","components_Game","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0ab2311a.chunk.js","sourcesContent":["import React from 'react';\n\n\nconst Cell = (props) => {\nconst {index, value} = props;\nreturn (\n      <span \n        className=\"Ceil\" \n        data-index={index}\n      >\n        {value}\n      </span>\n      );\n}\nexport default Cell;","import React, { Component } from 'react';\nimport Cell from './Cell';\n\nconst winnerCombinations = [\n  [0,1,2],\n  [0,3,6],\n  [0,4,8],\n  [1,4,7],\n  [2,4,6],\n  [2,5,8],\n  [3,4,5],\n  [6,7,8]\n];\n\nclass Game extends Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      cells: Array(9).fill(null),\n      winner: null,\n      currentTurn: 1\n    }\n  }\n\n  _getIndexCell(event) {\n    const cell = event.target.closest('[data-index]');\n    \n    if (!cell) return;\n\n    const index = cell.dataset.index;\n    this._markCeil(index);\n  }\n\n  _markCeil(index) {\n    let {winner, currentTurn, cells: [...cells]} = this.state;\n    \n    if(cells[index] !== null ) return;\n    if(winner !== null) return;\n   \n    \n    const marker = currentTurn % 2 === 1 ? 'X' : 'O' \n    cells[index] = marker;\n    currentTurn += 1; \n    winner = this._checkWinner(cells); \n\n    this.setState({\n      cells,\n      currentTurn,\n      winner,\n     }\n    );\n  }\n\n  _getCellText(value) {\n    return value || '';\n   }\n\n   _checkWinner(cells){\n     \n\n     for (let combination of winnerCombinations ) {\n       const [a, b, c] = [...combination];\n\n       if(\n         cells[a] !== null &&\n         cells[a] === cells[b] && cells[b] === cells[c]\n        ) {\n           return cells[a];\n         }\n      }\n      return null;\n   }\n\n  render() {\n    const {winner, currentTurn} = this.state;\n    return (\n      <div \n        className=\"Game-field\" \n        onClick={(event) => {\n          this._getIndexCell(event)\n         }\n        }\n      >\n        <h3>Tic Tac Toe { winner\n          ? `(Winner: ${winner})`\n          : `(Turn: ${currentTurn})`\n        } \n        </h3>\n\n        <div \n          className=\"Ceil-container\"\n           \n        >\n          <Cell index=\"0\" value={this._getCellText(this.state.cells[0])} />\n          <Cell index=\"1\" value={this._getCellText(this.state.cells[1])} />\n          <Cell index=\"2\" value={this._getCellText(this.state.cells[2])} />\n        </div>\n\n        <div \n          className=\"Ceil-container\" \n        >\n          <Cell index=\"3\" value={this._getCellText(this.state.cells[3])} />\n          <Cell index=\"4\" value={this._getCellText(this.state.cells[4])} />\n          <Cell index=\"5\" value={this._getCellText(this.state.cells[5])} />\n        </div>\n\n        <div \n          className=\"Ceil-container\" \n        >\n          <Cell index=\"6\" value={this._getCellText(this.state.cells[6])} />\n          <Cell index=\"7\" value={this._getCellText(this.state.cells[7])} />\n          <Cell index=\"8\" value={this._getCellText(this.state.cells[8])} />\n        </div>\n        <div className=\"btn-container\"> \n          <button \n            className=\"Game-btn--restart\"\n            onClick={() => this.setState({\n              cells: Array(9).fill(null),\n              winner: null,\n              currentTurn: 1\n              })\n            }\n          >\n            Restart\n          </button>\n        </div> \n      </div>\n    )\n   \n  }\n}\n\nexport default Game;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Game from './components/Game';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Game />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}