{"version":3,"sources":["Game.js","serviceWorker.js","index.js"],"names":["winnerCombinations","Game","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","cells","Array","fill","winner","currentTurn","index","_this$state","marker","_checkWinner","setState","value","_i","length","combination","_ref","toConsumableArray","a","b","c","_this2","_this$state2","react_default","createElement","Fragment","concat","className","map","cell","class","key","data-index","onClick","_markCell","_getCellText","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_Game","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2MAEMA,EAAqB,CACzB,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAoGMC,cAhGb,SAAAA,EAAYC,GAAM,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IAChBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CACXC,MAAOC,MAAM,GAAGC,KAAK,MACrBC,OAAQ,KACRC,YAAa,GALCZ,yEASRa,GAAO,IAAAC,EACeX,KAAKI,MAA9BI,EADUG,EACVH,OAAQC,EADEE,EACFF,YACNJ,EAASL,KAAKI,MAAdC,MAEP,GAAoB,OAAjBA,EAAMK,IACK,OAAXF,EAAH,CAEA,IAAMI,EAASH,EAAc,IAAM,EAAI,IAAM,IAC7CJ,EAAMK,GAASE,EACfH,GAAe,EACfD,EAASR,KAAKa,aAAaR,GAE3BL,KAAKc,SAAS,CACZT,QACAI,cACAD,iDAISO,GACX,OAAOA,GAAS,wCAGLV,GACX,QAAAW,EAAA,EAAAA,EAAwBtB,EAAxBuB,OAAAD,IAA6C,CAAxC,IAAIE,EAAexB,EAAJsB,GAAyBG,EAAArB,OAAAsB,EAAA,EAAAtB,CACvBoB,GAAfG,EADsCF,EAAA,GACnCG,EADmCH,EAAA,GAChCI,EADgCJ,EAAA,GAG3C,GACe,OAAbd,EAAMgB,IACNhB,EAAMgB,KAAOhB,EAAMiB,IACnBjB,EAAMiB,KAAOjB,EAAMkB,GAEjB,OAAOlB,EAAMgB,GAGnB,OAAO,sCAGA,IAAAG,EAAAxB,KAAAyB,EACuBzB,KAAKI,MAA5BI,EADAiB,EACAjB,OAAQC,EADRgB,EACQhB,YACRJ,EAASL,KAAKI,MAAdC,MAEP,OACEqB,EAAAL,EAAAM,cAAAD,EAAAL,EAAAO,SAAA,KACEF,EAAAL,EAAAM,cAAA,yBAAkBnB,EAAM,YAAAqB,OACRrB,EADQ,eAAAqB,OAEVpB,EAFU,MAMxBiB,EAAAL,EAAAM,cAAA,OACEG,UAAU,cAETzB,EAAM0B,IAAI,SAACC,EAAMtB,GAAP,OACTgB,EAAAL,EAAAM,cAAA,OACEM,MAAM,OACNC,IAAKxB,EACLyB,aAAYzB,EACZ0B,QAAS,kBAAMZ,EAAKa,UAAU3B,KAE7Bc,EAAKc,aAAajC,EAAMK,OAM7BgB,EAAAL,EAAAM,cAAA,OACEG,UAAU,iBAEVJ,EAAAL,EAAAM,cAAA,UACEG,UAAU,oBACVM,QAAS,kBAAMZ,EAAKV,SAAS,CAC3BT,MAAOC,MAAM,GAAGC,KAAK,MACrBC,OAAQ,KACRC,YAAa,MALjB,qBA/EO8B,aCDCC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOpB,EAAAL,EAAAM,cAACoB,EAAD,MAAUC,SAASC,eAAe,SD2H5C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.ddba43cc.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nconst winnerCombinations = [\n  [0, 1, 2],\n  [0, 3, 6],\n  [0, 4, 8],\n  [1, 4, 7],\n  [2, 4, 6],\n  [2, 5, 8],\n  [3, 4, 5],\n  [6, 7, 8]\n];\n\nclass Game extends Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      cells: Array(9).fill(null),\n      winner: null,\n      currentTurn: 1\n    }\n  }\n\n  _markCell(index) {\n    let {winner, currentTurn, } = this.state;\n    const {cells} = this.state;\n    \n    if(cells[index] !== null ) return;\n    if(winner !== null) return;\n    \n    const marker = currentTurn % 2 === 1 ? 'X' : 'O' \n    cells[index] = marker;\n    currentTurn += 1; \n    winner = this._checkWinner(cells); \n\n    this.setState({\n      cells,\n      currentTurn,\n      winner,\n    });\n  }\n\n  _getCellText(value) {\n    return value || '';\n  }\n\n  _checkWinner(cells){\n    for (let combination of winnerCombinations ) {\n      let [a, b, c] = [...combination];\n\n      if(\n        cells[a] !== null &&\n        cells[a] === cells[b] && \n        cells[b] === cells[c]\n      ) {\n          return cells[a];\n        }\n    }\n    return null;\n  }\n\n  render() {\n    const {winner, currentTurn} = this.state;\n    const {cells} = this.state;\n\n    return (\n      <>\n        <h2>Tic Tac Toe { winner\n          ? `(Winner: ${winner})`\n          : `(Turn: ${currentTurn})`\n        } \n        </h2>\n\n        <div \n          className=\"Game-field\" \n        >\n          {cells.map((cell, index) => (\n            <div \n              class=\"Cell\" \n              key={index} \n              data-index={index} \n              onClick={() => this._markCell(index)}\n            >\n              {this._getCellText(cells[index])}\n            </div>\n            )\n            )\n          }\n        \n          <div \n            className=\"btn-container\"\n          > \n            <button \n              className=\"Game-btn--restart\"\n              onClick={() => this.setState({\n                cells: Array(9).fill(null),\n                winner: null,\n                currentTurn: 1\n                })\n              }\n            >\n              Restart\n            </button>\n          </div> \n        </div>\n      </>\n    )\n  }\n}\n\nexport default Game;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Game from './Game';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Game />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}